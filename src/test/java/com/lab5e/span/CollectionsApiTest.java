/*
 * The Span API
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 5.0.4 pettish-alleen
 * Contact: dev@lab5e.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lab5e.span;

import com.lab5e.ApiException;
import com.lab5e.span.model.Collection;
import com.lab5e.span.model.CollectionStats;
import com.lab5e.span.model.CreateCollectionRequest;
import com.lab5e.span.model.ListCollectionResponse;
import com.lab5e.span.model.ListDataResponse;
import com.lab5e.span.model.RpcStatus;
import com.lab5e.span.model.UpdateCollectionBody;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CollectionsApi
 */
@Disabled
public class CollectionsApiTest {

    private final CollectionsApi api = new CollectionsApi();

    /**
     * Create collection
     *
     * Create a new collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCollectionTest() throws ApiException {
        CreateCollectionRequest body = null;
        Collection response = api.createCollection(body);
        // TODO: test validations
    }

    /**
     * Delete collection
     *
     * Remove the collection. Devices, firmware images, outputs and all other related resources must be removed from the collection before it can be deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCollectionTest() throws ApiException {
        String collectionId = null;
        Collection response = api.deleteCollection(collectionId);
        // TODO: test validations
    }

    /**
     * Retrieve data from devices
     *
     * Retrieve data sent by the devices in the collection. The maximum number of data points is 100.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCollectionDataTest() throws ApiException {
        String collectionId = null;
        Integer limit = null;
        String start = null;
        String end = null;
        String offset = null;
        ListDataResponse response = api.listCollectionData(collectionId, limit, start, end, offset);
        // TODO: test validations
    }

    /**
     * List collections
     *
     * Lists all the collections that one of your teams owns. The collections returned includes only the data on the collection and not the summary information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCollectionsTest() throws ApiException {
        ListCollectionResponse response = api.listCollections();
        // TODO: test validations
    }

    /**
     * Retrieve collection
     *
     * Retrieve collection information. This includes a list of the most recent messages in the inbox. The upstream and downstream parameters are optional and if set to true will include the timestamps for up to 100 messages up- and downstream for the last hour.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveCollectionTest() throws ApiException {
        String collectionId = null;
        Boolean upstream = null;
        Boolean downstream = null;
        Collection response = api.retrieveCollection(collectionId, upstream, downstream);
        // TODO: test validations
    }

    /**
     * Retrieve collection statistics
     *
     * Retrieve statistics for the collection. This is the aggregated metrics for devices, outputs, firmware images, blobs and gateways in the collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveCollectionStatsTest() throws ApiException {
        String collectionId = null;
        CollectionStats response = api.retrieveCollectionStats(collectionId);
        // TODO: test validations
    }

    /**
     * Update collection
     *
     * Update a collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCollectionTest() throws ApiException {
        String collectionId = null;
        UpdateCollectionBody body = null;
        Collection response = api.updateCollection(collectionId, body);
        // TODO: test validations
    }

}
