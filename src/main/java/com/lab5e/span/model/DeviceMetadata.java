/*
 * The Span API
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 4.8.0 indecipherable-ferman
 * Contact: dev@lab5e.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lab5e.span.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.lab5e.span.model.CellularIoTMetadata;
import com.lab5e.span.model.GatewayDeviceMetadata;
import com.lab5e.span.model.InetMetadata;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.lab5e.JSON;

/**
 * This is the metadata for devices.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-26T21:32:33.579133Z[Etc/UTC]")
public class DeviceMetadata {
  public static final String SERIALIZED_NAME_CIOT = "ciot";
  @SerializedName(SERIALIZED_NAME_CIOT)
  private CellularIoTMetadata ciot;

  public static final String SERIALIZED_NAME_INET = "inet";
  @SerializedName(SERIALIZED_NAME_INET)
  private InetMetadata inet;

  public static final String SERIALIZED_NAME_GATEWAY = "gateway";
  @SerializedName(SERIALIZED_NAME_GATEWAY)
  private GatewayDeviceMetadata gateway;

  public DeviceMetadata() {
  }

  public DeviceMetadata ciot(CellularIoTMetadata ciot) {
    
    this.ciot = ciot;
    return this;
  }

   /**
   * Get ciot
   * @return ciot
  **/
  @javax.annotation.Nullable

  public CellularIoTMetadata getCiot() {
    return ciot;
  }


  public void setCiot(CellularIoTMetadata ciot) {
    this.ciot = ciot;
  }


  public DeviceMetadata inet(InetMetadata inet) {
    
    this.inet = inet;
    return this;
  }

   /**
   * Get inet
   * @return inet
  **/
  @javax.annotation.Nullable

  public InetMetadata getInet() {
    return inet;
  }


  public void setInet(InetMetadata inet) {
    this.inet = inet;
  }


  public DeviceMetadata gateway(GatewayDeviceMetadata gateway) {
    
    this.gateway = gateway;
    return this;
  }

   /**
   * Get gateway
   * @return gateway
  **/
  @javax.annotation.Nullable

  public GatewayDeviceMetadata getGateway() {
    return gateway;
  }


  public void setGateway(GatewayDeviceMetadata gateway) {
    this.gateway = gateway;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceMetadata deviceMetadata = (DeviceMetadata) o;
    return Objects.equals(this.ciot, deviceMetadata.ciot) &&
        Objects.equals(this.inet, deviceMetadata.inet) &&
        Objects.equals(this.gateway, deviceMetadata.gateway);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ciot, inet, gateway);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceMetadata {\n");
    sb.append("    ciot: ").append(toIndentedString(ciot)).append("\n");
    sb.append("    inet: ").append(toIndentedString(inet)).append("\n");
    sb.append("    gateway: ").append(toIndentedString(gateway)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ciot");
    openapiFields.add("inet");
    openapiFields.add("gateway");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DeviceMetadata
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DeviceMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceMetadata is not found in the empty JSON string", DeviceMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DeviceMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceMetadata` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `ciot`
      if (jsonObj.get("ciot") != null && !jsonObj.get("ciot").isJsonNull()) {
        CellularIoTMetadata.validateJsonObject(jsonObj.getAsJsonObject("ciot"));
      }
      // validate the optional field `inet`
      if (jsonObj.get("inet") != null && !jsonObj.get("inet").isJsonNull()) {
        InetMetadata.validateJsonObject(jsonObj.getAsJsonObject("inet"));
      }
      // validate the optional field `gateway`
      if (jsonObj.get("gateway") != null && !jsonObj.get("gateway").isJsonNull()) {
        GatewayDeviceMetadata.validateJsonObject(jsonObj.getAsJsonObject("gateway"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceMetadata>() {
           @Override
           public void write(JsonWriter out, DeviceMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceMetadata read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeviceMetadata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeviceMetadata
  * @throws IOException if the JSON string is invalid with respect to DeviceMetadata
  */
  public static DeviceMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceMetadata.class);
  }

 /**
  * Convert an instance of DeviceMetadata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

